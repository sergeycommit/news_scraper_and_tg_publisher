#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ –¥–ª—è IEEE Spectrum Scraper
Test script for date filtering functionality
"""

import sys
import os
from datetime import date, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_date_parsing():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç"""
    try:
        from ieee_spectrum_scraper import IEEESpectrumScraper
        scraper = IEEESpectrumScraper()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞—Ç—ã
        test_cases = [
            ("22 Jul 2025", date(2025, 7, 22)),
            ("July 22, 2025", date(2025, 7, 22)),
            ("2025-07-22", date(2025, 7, 22)),
            ("22/07/2025", date(2025, 7, 22)),
            ("Today", scraper.today),
            ("Yesterday", scraper.today - timedelta(days=1)),
            ("2 hours ago", scraper.today),
            ("1 day ago", scraper.today),
            ("", None),
            ("Invalid date", None),
        ]
        
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç")
        print("=" * 50)
        
        passed = 0
        total = len(test_cases)
        
        for i, (date_text, expected) in enumerate(test_cases, 1):
            print(f"\nüîç –¢–µ—Å—Ç {i}:")
            print(f"   –î–∞—Ç–∞: '{date_text}'")
            
            result = scraper.parse_article_date(date_text)
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            print(f"   –û–∂–∏–¥–∞–ª–æ—Å—å: {expected}")
            
            if result == expected:
                print("   ‚úÖ –£—Å–ø–µ—à–Ω–æ")
                passed += 1
            else:
                print("   ‚ùå –û—à–∏–±–∫–∞")
        
        print("\n" + "=" * 50)
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
        
        if passed == total:
            print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        
        return passed == total
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def test_today_filtering():
    """–¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–µ"""
    try:
        from ieee_spectrum_scraper import IEEESpectrumScraper
        scraper = IEEESpectrumScraper()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏
        test_articles = [
            {
                'title': 'Today Article 1',
                'date': 'Today',
                'parsed_date': scraper.today,
                'topic': 'AI'
            },
            {
                'title': 'Yesterday Article',
                'date': 'Yesterday',
                'parsed_date': scraper.today - timedelta(days=1),
                'topic': 'AI'
            },
            {
                'title': 'Old Article',
                'date': '20 Jul 2025',
                'parsed_date': date(2025, 7, 20),
                'topic': 'Robotics'
            },
            {
                'title': 'Today Article 2',
                'date': '2 hours ago',
                'parsed_date': scraper.today,
                'topic': 'Robotics'
            }
        ]
        
        print("\nüîç –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–µ:")
        print(f"–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞: {scraper.today}")
        
        today_articles = []
        for article in test_articles:
            if scraper.is_article_from_today(article['parsed_date']):
                today_articles.append(article)
                print(f"   ‚úÖ –°–µ–≥–æ–¥–Ω—è: {article['title']} ({article['date']})")
            else:
                print(f"   ‚ùå –ù–µ —Å–µ–≥–æ–¥–Ω—è: {article['title']} ({article['date']})")
        
        print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {len(today_articles)}")
        
        expected_today = 2  # "Today Article 1" –∏ "Today Article 2"
        if len(today_articles) == expected_today:
            print("‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            return True
        else:
            print(f"‚ùå –û–∂–∏–¥–∞–ª–æ—Å—å {expected_today} —Å—Ç–∞—Ç–µ–π, –Ω–∞–π–¥–µ–Ω–æ {len(today_articles)}")
            return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_scraper_initialization():
    """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∫—Ä–∞–ø–µ—Ä–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –¥–∞—Ç–µ"""
    try:
        from ieee_spectrum_scraper import IEEESpectrumScraper
        scraper = IEEESpectrumScraper()
        
        print("\nüîç –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∫—Ä–∞–ø–µ—Ä–∞:")
        print(f"   –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞: {scraper.today}")
        print(f"   AI URL: {scraper.ai_url}")
        print(f"   Robotics URL: {scraper.robotics_url}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        if scraper.today == date.today():
            print("   ‚úÖ –î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            print("   ‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∞—Ç—ã")
            return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ IEEE Spectrum Scraper")
    print("=" * 70)
    
    tests = [
        ("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫—Ä–∞–ø–µ—Ä–∞", test_scraper_initialization),
        ("–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç", test_date_parsing),
        ("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–µ", test_today_filtering),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüîç {test_name}...")
        if test_func():
            passed += 1
        else:
            print(f"   ‚ùå –¢–µ—Å—Ç '{test_name}' –Ω–µ –ø—Ä–æ—à–µ–ª")
    
    print("\n" + "=" * 70)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –°–∫—Ä–∞–ø–µ—Ä –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —Å—Ç–∞—Ç—å–∏")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        print("‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ")
    
    print("\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python run_ieee_scraper.py")
    print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ ieee_scraper.log")
    print("3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —Å—Ç–∞—Ç—å–∏")

if __name__ == "__main__":
    main() 