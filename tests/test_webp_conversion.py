#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ WebP –≤ PNG –¥–ª—è IEEE Spectrum Scraper
Test script for WebP to PNG conversion
"""

import sys
import os
import tempfile

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_webp_conversion():
    """–¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ WebP –≤ PNG"""
    try:
        from ieee_spectrum_scraper import IEEESpectrumScraper
        scraper = IEEESpectrumScraper()
        
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ WebP –≤ PNG")
        print("=" * 60)
        
        # –¢–µ—Å—Ç–æ–≤—ã–π URL –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –∏–∑ –ª–æ–≥–æ–≤
        test_media_url = "https://spectrum.ieee.org/media-library/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpbWFnZSI6Imh0dHBzOi8vYXNzZXRzLnJibC5tcy8yNjg4NDUyMC9vcmlnaW4ucG5nIiwiZXhwaXJlc19hdCI6MTc2MzA3MTQzOX0.SxRBIud_XE2YWQFaIJD9BPB1w-3JsFhiRkJIIe9Yq-g/image.png?width=210"
        
        print(f"üîó –¢–µ—Å—Ç–æ–≤—ã–π URL: {test_media_url}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ —Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π
        print("\nüì• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π...")
        try:
            media_path = scraper.download_media(test_media_url)
            
            if media_path and os.path.exists(media_path):
                file_size = os.path.getsize(media_path)
                file_ext = os.path.splitext(media_path)[1].lower()
                
                print(f"   ‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {media_path}")
                print(f"   üìè –†–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç")
                print(f"   üîß –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ: {file_ext}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
                if file_size > 0:
                    print("   ‚úÖ –§–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ PNG (–ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏)
                    if file_ext == '.png':
                        print("   ‚úÖ –£—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ PNG")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ PNG —Ñ–∞–π–ª –≤–∞–ª–∏–¥–Ω—ã–π
                        try:
                            from PIL import Image
                            with Image.open(media_path) as img:
                                print(f"   üìê –†–∞–∑–º–µ—Ä—ã: {img.size}")
                                print(f"   üé® –†–µ–∂–∏–º: {img.mode}")
                                print("   ‚úÖ PNG —Ñ–∞–π–ª –≤–∞–ª–∏–¥–Ω—ã–π")
                        except Exception as e:
                            print(f"   ‚ùå PNG —Ñ–∞–π–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π: {e}")
                            return False
                    else:
                        print(f"   ‚ö†Ô∏è –§–∞–π–ª –æ—Å—Ç–∞–ª—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ {file_ext}")
                    
                    # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
                    try:
                        os.unlink(media_path)
                        print("   üóëÔ∏è –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
                    except:
                        print("   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª")
                    
                    return True
                else:
                    print("   ‚ùå –§–∞–π–ª –ø—É—Å—Ç–æ–π")
                    return False
            else:
                print("   ‚ùå –§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
                return False
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def test_pil_availability():
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ PIL"""
    try:
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ PIL...")
        
        try:
            from PIL import Image
            print("   ‚úÖ PIL –¥–æ—Å—Ç—É–ø–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É WebP
            try:
                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                test_img = Image.new('RGB', (100, 100), color='red')
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ WebP
                with tempfile.NamedTemporaryFile(suffix='.webp', delete=False) as f:
                    test_img.save(f.name, 'WEBP')
                    webp_path = f.name
                
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º WebP
                with Image.open(webp_path) as img:
                    print("   ‚úÖ WebP –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                
                # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
                os.unlink(webp_path)
                
            except Exception as e:
                print(f"   ‚ö†Ô∏è WebP –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
            
            return True
            
        except ImportError:
            print("   ‚ùå PIL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ PIL: {e}")
        return False

def test_telegram_media_compatibility():
    """–¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ —Å Telegram"""
    try:
        print("\nüì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Telegram:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
        from ieee_spectrum_scraper import IEEESpectrumScraper
        scraper = IEEESpectrumScraper()
        
        if not scraper.telegram_token or not scraper.telegram_channel:
            print("   ‚ö†Ô∏è Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
            return True
        
        print("   ‚úÖ Telegram –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        print("   üìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è Telegram:")
        print("      ‚Ä¢ PNG: –ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞")
        print("      ‚Ä¢ JPEG: –ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞")
        print("      ‚Ä¢ WebP: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞")
        print("      ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB")
        print("      ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: < 5MB")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ WebP –≤ PNG")
    print("=" * 70)
    
    tests = [
        ("–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å PIL", test_pil_availability),
        ("–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è WebP –≤ PNG", test_webp_conversion),
        ("–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å Telegram", test_telegram_media_compatibility),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüîç {test_name}...")
        if test_func():
            passed += 1
        else:
            print(f"   ‚ùå –¢–µ—Å—Ç '{test_name}' –Ω–µ –ø—Ä–æ—à–µ–ª")
    
    print("\n" + "=" * 70)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è WebP –≤ PNG —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚úÖ –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã —Å–æ–≤–º–µ—Å—Ç–∏–º—ã —Å Telegram")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        print("‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
    
    print("\nüìù –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ WebP –≤ PNG:")
    print("1. –õ—É—á—à–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å Telegram")
    print("2. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–æ –≤—Å–µ—Ö –≤–µ—Ä—Å–∏—è—Ö Telegram")
    print("3. –ë–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    print("4. –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é")

if __name__ == "__main__":
    main() 