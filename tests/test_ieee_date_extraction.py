#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞—Ç –¥–ª—è IEEE Spectrum Scraper
Test script for IEEE Spectrum date extraction
"""

import sys
import os
from datetime import date, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_ieee_date_extraction():
    """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞—Ç —Å IEEE Spectrum"""
    try:
        from ieee_spectrum_scraper import IEEESpectrumScraper
        scraper = IEEESpectrumScraper()
        
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞—Ç IEEE Spectrum")
        print("=" * 60)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞—Ç IEEE
        test_cases = [
            ("20 Jul 2025", date(2025, 7, 20)),
            ("17h", scraper.today),  # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
            ("2d", scraper.today),   # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
            ("30m", scraper.today),  # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
            ("Today", scraper.today),
            ("Yesterday", scraper.today - timedelta(days=1)),
            ("2 hours ago", scraper.today),
            ("1 day ago", scraper.today),
            ("", None),
            ("Invalid date", None),
        ]
        
        passed = 0
        total = len(test_cases)
        
        for i, (date_text, expected) in enumerate(test_cases, 1):
            print(f"\nüîç –¢–µ—Å—Ç {i}:")
            print(f"   –î–∞—Ç–∞: '{date_text}'")
            
            result = scraper.parse_article_date(date_text)
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            print(f"   –û–∂–∏–¥–∞–ª–æ—Å—å: {expected}")
            
            if result == expected:
                print("   ‚úÖ –£—Å–ø–µ—à–Ω–æ")
                passed += 1
            else:
                print("   ‚ùå –û—à–∏–±–∫–∞")
        
        print("\n" + "=" * 60)
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
        
        if passed == total:
            print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        
        return passed == total
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def test_actual_scraping():
    """–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ —Å IEEE Spectrum"""
    try:
        from ieee_spectrum_scraper import IEEESpectrumScraper
        scraper = IEEESpectrumScraper()
        
        print("\nüîç –¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ IEEE Spectrum:")
        
        # –°–∫—Ä–∞–ø–∏–º —Å—Ç–∞—Ç—å–∏
        articles = scraper.scrape_ieee_articles()
        
        print(f"üì∞ –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: {len(articles)}")
        
        if articles:
            print("\nüìã –ü—Ä–∏–º–µ—Ä—ã —Å—Ç–∞—Ç–µ–π:")
            for i, article in enumerate(articles[:3], 1):
                print(f"   {i}. {article['title'][:60]}...")
                print(f"      –î–∞—Ç–∞: '{article['date']}' -> {article['parsed_date']}")
                print(f"      –¢–µ–º–∞: {article['topic']}")
                print()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Å—Ç–∞—Ç—å–∏ —Å –¥–∞—Ç–∞–º–∏
            articles_with_dates = [a for a in articles if a['parsed_date']]
            print(f"üìÖ –°—Ç–∞—Ç–µ–π —Å —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏: {len(articles_with_dates)}")
            
            if articles_with_dates:
                print("‚úÖ –°–∫—Ä–∞–ø–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
                return True
            else:
                print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—ã")
                return False
        else:
            print("‚ùå –°—Ç–∞—Ç—å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞—Ç IEEE Spectrum Scraper")
    print("=" * 70)
    
    tests = [
        ("–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç IEEE", test_ieee_date_extraction),
        ("–†–µ–∞–ª—å–Ω—ã–π —Å–∫—Ä–∞–ø–∏–Ω–≥", test_actual_scraping),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüîç {test_name}...")
        if test_func():
            passed += 1
        else:
            print(f"   ‚ùå –¢–µ—Å—Ç '{test_name}' –Ω–µ –ø—Ä–æ—à–µ–ª")
    
    print("\n" + "=" * 70)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –°–∫—Ä–∞–ø–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å IEEE Spectrum")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        print("‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞—Ç")
    
    print("\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python run_ieee_scraper.py")
    print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ ieee_scraper.log")
    print("3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–∞—Ç—ã –∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

if __name__ == "__main__":
    main() 