#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ Markdown –≤ HTML
Test script for markdown to HTML conversion
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_markdown_conversion():
    """–¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ Markdown –≤ HTML"""
    try:
        from ieee_spectrum_scraper import IEEESpectrumScraper
        scraper = IEEESpectrumScraper()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã
        test_cases = [
            {
                'markdown': '–≠—Ç–æ **–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç** –∏ *–∫—É—Ä—Å–∏–≤*',
                'expected_html': '–≠—Ç–æ <b>–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç</b> –∏ <i>–∫—É—Ä—Å–∏–≤</i>'
            },
            {
                'markdown': '**–í–∞–∂–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å** –æ __—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö__',
                'expected_html': '<b>–í–∞–∂–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å</b> –æ <u>—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö</u>'
            },
            {
                'markdown': '–ö–æ–¥: `print("Hello")` –∏ ~~—Å—Ç–∞—Ä—ã–π —Ç–µ–∫—Å—Ç~~',
                'expected_html': '–ö–æ–¥: <code>print("Hello")</code> –∏ <s>—Å—Ç–∞—Ä—ã–π —Ç–µ–∫—Å—Ç</s>'
            },
            {
                'markdown': '–°—Å—ã–ª–∫–∞: [TechCrunch](https://techcrunch.com)',
                'expected_html': '–°—Å—ã–ª–∫–∞: <a href="https://techcrunch.com">TechCrunch</a>'
            },
            {
                'markdown': '–°–º–µ—à–∞–Ω–Ω—ã–π **—Ç–µ–∫—Å—Ç** —Å *—Ä–∞–∑–Ω—ã–º–∏* __—Å—Ç–∏–ª—è–º–∏__',
                'expected_html': '–°–º–µ—à–∞–Ω–Ω—ã–π <b>—Ç–µ–∫—Å—Ç</b> —Å <i>—Ä–∞–∑–Ω—ã–º–∏</i> <u>—Å—Ç–∏–ª—è–º–∏</u>'
            }
        ]
        
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ Markdown –≤ HTML")
        print("=" * 50)
        
        passed = 0
        total = len(test_cases)
        
        for i, test_case in enumerate(test_cases, 1):
            print(f"\nüîç –¢–µ—Å—Ç {i}:")
            print(f"   Markdown: {test_case['markdown']}")
            
            result = scraper.convert_markdown_to_html(test_case['markdown'])
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            print(f"   –û–∂–∏–¥–∞–ª–æ—Å—å: {test_case['expected_html']}")
            
            if result == test_case['expected_html']:
                print("   ‚úÖ –£—Å–ø–µ—à–Ω–æ")
                passed += 1
            else:
                print("   ‚ùå –û—à–∏–±–∫–∞")
        
        print("\n" + "=" * 50)
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
        
        if passed == total:
            print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        
        return passed == total
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def test_complex_markdown():
    """–¢–µ—Å—Ç —Å–ª–æ–∂–Ω–æ–≥–æ Markdown"""
    try:
        from ieee_spectrum_scraper import IEEESpectrumScraper
        scraper = IEEESpectrumScraper()
        
        complex_markdown = """
üöÄ **–ù–æ–≤–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è AI** —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –∏–Ω–¥—É—Å—Ç—Ä–∏—é!

*–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–∏* –∏–∑ __–≤–µ–¥—É—â–∏—Ö —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–≤__ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∏ ~~—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –ø–æ–¥—Ö–æ–¥~~ –∏ —Å–æ–∑–¥–∞–ª–∏ `–∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ`.

–ü–æ–¥—Ä–æ–±–Ω–µ–µ: [–ß–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç—å—é](https://spectrum.ieee.org/article/123)

**–ö–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
‚Ä¢ –í—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
‚Ä¢ –ù–∏–∑–∫–æ–µ —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ
‚Ä¢ –ü—Ä–æ—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        """
        
        print("\nüîç –¢–µ—Å—Ç —Å–ª–æ–∂–Ω–æ–≥–æ Markdown:")
        print("–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:")
        print(complex_markdown)
        
        result = scraper.convert_markdown_to_html(complex_markdown)
        print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:")
        print(result)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–µ–≥–æ–≤
        checks = [
            ('<b>', '–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç'),
            ('<i>', '–∫—É—Ä—Å–∏–≤'),
            ('<u>', '–ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π'),
            ('<s>', '–∑–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π'),
            ('<code>', '–∫–æ–¥'),
            ('<a href=', '—Å—Å—ã–ª–∫–∞')
        ]
        
        print("\n–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–≥–æ–≤:")
        for tag, description in checks:
            if tag in result:
                print(f"   ‚úÖ {description}: {tag}")
            else:
                print(f"   ‚ùå {description}: {tag} - –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ–∂–Ω–æ–≥–æ Markdown: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ Markdown –≤ HTML")
    print("=" * 60)
    
    # –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã
    basic_tests = test_markdown_conversion()
    
    # –°–ª–æ–∂–Ω—ã–π —Ç–µ—Å—Ç
    complex_test = test_complex_markdown()
    
    print("\n" + "=" * 60)
    if basic_tests and complex_test:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Markdown –≤ HTML —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –¢–µ–ø–µ—Ä—å –ø–æ—Å—Ç—ã –≤ Telegram –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        print("‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")

if __name__ == "__main__":
    main() 