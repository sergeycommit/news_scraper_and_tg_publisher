#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –¥–ª—è IEEE Spectrum Scraper
Test script for media download functionality
"""

import sys
import os
import requests
from urllib.parse import urlparse

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_media_download():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤"""
    try:
        from ieee_spectrum_scraper import IEEESpectrumScraper
        scraper = IEEESpectrumScraper()
        
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤")
        print("=" * 60)
        
        # –¢–µ—Å—Ç–æ–≤—ã–π URL –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –∏–∑ –ª–æ–≥–æ–≤
        test_media_url = "https://spectrum.ieee.org/media-library/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpbWFnZSI6Imh0dHBzOi8vYXNzZXRzLnJibC5tcy8yNjg4NDUyMC9vcmlnaW4ucG5nIiwiZXhwaXJlc19hdCI6MTc2MzA3MTQzOX0.SxRBIud_XE2YWQFaIJD9BPB1w-3JsFhiRkJIIe9Yq-g/image.png?width=210"
        
        print(f"üîó –¢–µ—Å—Ç–æ–≤—ã–π URL: {test_media_url}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å URL
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ URL...")
        try:
            response = requests.head(test_media_url, headers=scraper.headers, timeout=10)
            print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
            print(f"   Content-Type: {response.headers.get('content-type', 'Unknown')}")
            print(f"   Content-Length: {response.headers.get('content-length', 'Unknown')}")
            
            if response.status_code == 200:
                print("   ‚úÖ URL –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                print("   ‚ùå URL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return False
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ URL: {e}")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞
        print("\nüì• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏...")
        try:
            media_path = scraper.download_media(test_media_url)
            
            if media_path and os.path.exists(media_path):
                file_size = os.path.getsize(media_path)
                print(f"   ‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {media_path}")
                print(f"   üìè –†–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç")
                print(f"   üîß –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ: {os.path.splitext(media_path)[1]}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
                if file_size > 0:
                    print("   ‚úÖ –§–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π")
                    
                    # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
                    try:
                        os.unlink(media_path)
                        print("   üóëÔ∏è –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
                    except:
                        print("   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª")
                    
                    return True
                else:
                    print("   ‚ùå –§–∞–π–ª –ø—É—Å—Ç–æ–π")
                    return False
            else:
                print("   ‚ùå –§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
                return False
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def test_media_extraction():
    """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –∏–∑ —Å—Ç–∞—Ç—å–∏"""
    try:
        from ieee_spectrum_scraper import IEEESpectrumScraper
        scraper = IEEESpectrumScraper()
        
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –∏–∑ —Å—Ç–∞—Ç—å–∏:")
        
        # –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç–∞—Ç—å—è
        test_article_url = "https://spectrum.ieee.org/topic/robotics/"
        
        print(f"üì∞ URL —Å—Ç–∞—Ç—å–∏: {test_article_url}")
        
        try:
            # –°–∫—Ä–∞–ø–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –º–µ–¥–∏–∞
            content, media_url = scraper.scrape_article_content_and_media(test_article_url)
            
            print(f"üìù –ö–æ–Ω—Ç–µ–Ω—Ç: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"üñºÔ∏è –ú–µ–¥–∏–∞ URL: {media_url}")
            
            if media_url:
                print("   ‚úÖ –ú–µ–¥–∏–∞—Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞
                parsed_url = urlparse(media_url)
                path = parsed_url.path.lower()
                
                if any(ext in path for ext in ['.jpg', '.jpeg', '.png', '.gif', '.webp']):
                    print("   üñºÔ∏è –¢–∏–ø: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                elif any(ext in path for ext in ['.mp4', '.webm', '.avi']):
                    print("   üé• –¢–∏–ø: –í–∏–¥–µ–æ")
                else:
                    print("   ‚ùì –¢–∏–ø: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
                
                return True
            else:
                print("   ‚ùå –ú–µ–¥–∏–∞—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞: {e}")
            return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def test_telegram_media_send():
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –≤ Telegram"""
    try:
        from ieee_spectrum_scraper import IEEESpectrumScraper
        scraper = IEEESpectrumScraper()
        
        print("\nüì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –≤ Telegram:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
        if not scraper.telegram_token:
            print("   ‚ùå Telegram —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
        
        if not scraper.telegram_channel:
            print("   ‚ùå Telegram –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
        
        print(f"   ‚úÖ Telegram —Ç–æ–∫–µ–Ω: {scraper.telegram_token[:10]}...")
        print(f"   ‚úÖ Telegram –∫–∞–Ω–∞–ª: {scraper.telegram_channel}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram
        try:
            import asyncio
            
            async def test_connection():
                try:
                    me = await scraper.telegram_bot.get_me()
                    print(f"   ‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{me.username}")
                    return True
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É: {e}")
                    return False
            
            result = asyncio.run(test_connection())
            return result
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram: {e}")
            return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ IEEE Spectrum Scraper")
    print("=" * 70)
    
    tests = [
        ("–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞", test_media_download),
        ("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ–¥–∏–∞ –∏–∑ —Å—Ç–∞—Ç—å–∏", test_media_extraction),
        ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram", test_telegram_media_send),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüîç {test_name}...")
        if test_func():
            passed += 1
        else:
            print(f"   ‚ùå –¢–µ—Å—Ç '{test_name}' –Ω–µ –ø—Ä–æ—à–µ–ª")
    
    print("\n" + "=" * 70)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ Telegram –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        print("‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤")
    
    print("\nüìù –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:")
    print("1. –ú–µ–¥–∏–∞—Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –Ω–æ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ Telegram")
    print("2. –ü—Ä–æ–±–ª–µ–º—ã —Å —Ñ–æ—Ä–º–∞—Ç–æ–º —Ñ–∞–π–ª–∞")
    print("3. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Telegram –Ω–∞ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞")
    print("4. –ü—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É")

if __name__ == "__main__":
    main() 